peString(extendsOptionDeclaration)));
    } else {
      const newBase = configFileName ? directoryOfCombinedPath(configFileName, basePath) : basePath;
      if (isString(json.extends)) {
        extendedConfigPath = getExtendsConfigPath(json.extends, host, newBase, errors, createCompilerDiagnostic);
      } else {
        extendedConfigPath = [];
        for (const fileName of json.extends) {
          if (isString(fileName)) {
            extendedConfigPath = append(extendedConfigPath, getExtendsConfigPath(fileName, host, newBase, errors, createCompilerDiagnostic));
          } else {
            errors.push(createCompilerDiagnostic(Diagnostics.Compiler_option_0_requires_a_value_of_type_1, "extends", getCompilerOptionValueTypeString(extendsOptionDeclaration.element)));
          }
        }
      }
    }
  }
  return { raw: json, options, watchOptions, typeAcquisition, extendedConfigPath };
}
function parseOwnConfigOfJsonSourceFile(sourceFile, host, basePath, configFile