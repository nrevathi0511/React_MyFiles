e.kind) {
    case 273 /* ImportSpecifier */:
      return node.isTypeOnly || node.parent.parent.isTypeOnly;
    case 271 /* NamespaceImport */:
      return node.parent.isTypeOnly;
    case 270 /* ImportClause */:
    case 268 /* ImportEqualsDeclaration */:
      return node.isTypeOnly;
  }
  return false;
}
function isTypeOnlyExportDeclaration(node) {
  switch (node.kind) {
    case 278 /* ExportSpecifier */:
      return node.isTypeOnly || node.parent.parent.isTypeOnly;
    case 275 /* ExportDeclaration */:
      return node.isTypeOnly && !!node.moduleSpecifier && !node.exportClause;
    case 277 /* NamespaceExport */:
      return node.parent.isTypeOnly;
  }
  return false;
}
function isTypeOnlyImportOrExportDeclaration(node) {
  return isTypeOnlyImportDeclaration(node) || isTypeOnlyExportDeclaration(node);
}
function isAssertionKey(node) {
  return isStringLiteral(node) || isIdentifier(node);
}
function isStringTextContainingNode(node) {
  return node.kind === 10 /* StringLiteral */ || isTemplateLiteralKind(node.kind);
}
function isGeneratedIdentifier(node) {
  var _a2;
  return isIdentifier(node) && ((_a2 = node.emitNode) == null ? void 0 : _a2.autoGenerate) !== void 0;
}
function isGeneratedPrivateIdentifier(node) {
  var _a2;
  return isPrivateIdentifier(node) && ((_a2 = node.emitNode) == null ? void 0 : _a2.autoGenerate) !== void 0;
}
function isPrivateIdentifierClassElementDeclaration(node) {
  return (isPropertyDeclaration(node) || isMethodOrAccessor(node)) && isPrivateIdentifier(node.name);
}
function isPrivateIdentifierPropertyAccessExpression(node) {
  return isPropertyAccessExpression(node) && isPrivateIdentifier(node.name);
}
function isModifierKind(token) {
  switch (token) {
    case 126 /* AbstractKeyword */:
    case 127 /* AccessorKeyword */:
    case 132 /* AsyncKeyword */:
    case 85 /* ConstKeyword */:
    case 136 /* DeclareKeyword */:
    case 88 /* DefaultKeyword */:
    case 93 /* ExportKeyword */:
    case 101 /* InKeyword */:
    case 123 /* PublicKeyword */:
    case 121 /* PrivateKeyword */:
    case 122 /* ProtectedKeyword */:
    case 146 /* ReadonlyKeyword */:
    case 124 /* StaticKeyword */:
    case 145 /* OutKeyword */:
    case 161 /* OverrideKeyword */:
      return true;
  }
  return false;
}
function isParameterPropertyModifier(kind) {
  return !!(modifierToFlag(kind) & 16476 /* ParameterPropertyModifier */);
}
function isClassMemberModifier(idToken) {
  return isParameterPropertyModifier(idToken) || idToken === 124 /* StaticKeyword */ || idToken === 161 /* OverrideKeyword */ || idToken === 127 /* AccessorKeyword */;
}
function isModifier(node) {
  return isModifierKind(node.kind);
}
function isEntityName(node) {
  const kind = node.kind;
  return kind === 163 /* QualifiedName */ || kind === 79 /* Identifier */;
}
function isPropertyName(node) {
  const kind = node.kind;
  return kind === 79 /* Identifier */ || kind === 80 /* PrivateIdentifier */ || kind === 10 /* StringLiteral */ || kind === 8 /* NumericLiteral */ || kind === 164 /* ComputedPropertyName */;
}
function isBindingName(node) {
  const kind = node.kind;
  return kind === 79 /* Identifier */ || kind === 203 /* ObjectBindingPattern */ || kind === 204 /* ArrayBindingPattern */;
}
function isFunctionLike(node) {
  return !!node && isFunctionLikeKind(node.kind);
}
function isFunctionLikeOrClassStaticBlockDeclaration(node) {
  return !!node && (isFunctionLikeKind(node.kind) || isClassStaticBlockDeclaration(node));
}
function isFunctionLikeDeclaration(node) {
  return node && isFunctionLikeDeclarationKind(node.kind);
}
function isBooleanLiteral(node) {
  return node.kind === 110 /* TrueKeyword */ || node.kind === 95 /* FalseKeyword */;
}
function isFunctionLikeDeclarationKind(kind) {
  switch (kind) {
    case 259 /* FunctionDeclaration */:
    case 171 /* MethodDeclaration */:
    case 173 /* Constructor */:
    case 174 /* GetAccessor */:
    case 175 /* SetAccessor */:
    case 215 /* FunctionExpression */:
    case 216 /* ArrowFunction */:
      return true;
    default:
      return false;
  }
}
function isFunctionLikeKind(kind) {
  switch (kind) {
    case 170 /* MethodSignature */:
    case 176 /* CallSignature */:
    case 326 /* JSDocSignature */:
    case 177 /* ConstructSignature */:
    case 178 /* IndexSignature */:
    case 181 /* FunctionType */:
    case 320 /* JSDocFunctionType */:
    case 182 /* ConstructorType */:
      return true;
    default:
      return isFunctionLikeDeclarationKind(kind);
  }
}
function isFunctionOrModuleBlock(node) {
  return isSourceFile(node) || isModuleBlock(node) || isBlock(node) && isFunctionLike(node.parent);
}
function isClassElement(node) {
  const kind = node.kind;
  return kind === 173 /* Constructor */ || kind === 169 /* PropertyDeclaration */ || kind === 171 /* MethodDeclaration */ || kind === 174 /* GetAccessor */ || kind === 175 /* SetAccessor */ || kind === 178 /* IndexSignature */ || kind === 172 /* ClassStaticBlockDeclaration */ || kind === 237 /* SemicolonClassElement */;
}
function isClassLike(node) {
  return node && (node.kind === 260 /* ClassDeclaration */ || node.kind === 228 /* ClassExpression */);
}
function isAccessor(node) {
  return node && (node.kind === 174 /* GetAccessor */ || node.kind === 175 /* SetAccessor */);
}
function isAutoAccessorPropertyDeclaration(node) {
  return isPropertyDeclaration(node) && hasAccessorModifier(node);
}
function isMethodOrAccessor(node) {
  switch (node.kind) {
    case 171 /* MethodDeclaration */:
    case 174 /* GetAccessor */:
    case 175 /* SetAccessor */:
      return true;
    default:
      return false;
  }
}
function isNamedClassElement(node) {
  switch (node.kind) {
    case 171 /* MethodDeclaration */:
    case 174 /* GetAccessor */:
    case 175 /* SetAccessor */:
    case 169 /* PropertyDeclaration */:
      return true;
    default:
      return false;
  }
}
function isModifierLike(node) {
  return isModifier(node) || isDecorator(node);
}
function isTypeElement(node) {
  const kind = node.kind;
  return kind === 177 /* ConstructSignature */ || kind === 176 /* CallSignature */ || kind === 168 /* PropertySignature */ || kind === 170 /* MethodSignature */ || kind === 178 /* IndexSignature */ || kind === 174 /* GetAccessor */ || kind === 175 /* SetAccessor */;
}
function isClassOrTypeElement(node) {
  return isTypeElement(node) || isClassElement(node);
}
function isObjectLiteralElementLike(node) {
  const kind = node.kind;
  return kind === 299 /* PropertyAssignment */ || kind === 300 /* ShorthandPropertyAssignment */ || kind === 301 /* SpreadAssignment */ || kind === 171 /* MethodDeclaration */ || kind === 174 /* GetAccessor */ || kind === 175 /* SetAccessor */;
}
function isTypeNode(node) {
  return isTypeNodeKind(node.kind);
}
function isFunctionOrConstructorTypeNode(node) {
  switch (node.kind) {
    case 181 /* FunctionType */:
    case 182 /* ConstructorType */:
      return true;
  }
  return false;
}
function isBindingPattern(node) {
  if (node) {
    const kind = node.kind;
    return kind === 204 /* ArrayBindingPattern */ || kind === 203 /* ObjectBindingPattern */;
  }
  return false;
}
function isAssignmentPattern(node) {
  const kind = node.kind;
  return kind === 206 /* ArrayLiteralExpression */ || kind === 207 /* ObjectLiteralExpression */;
}
function isArrayBindingElement(node) {
  const kind = node.kind;
  return kind === 205 /* BindingElement */ || kind === 229 /* OmittedExpression */;
}
function isDeclarationBindingElement(bindingElement) {
  switch (bindingElement.kind) {
    case 257 /* VariableDeclaration */:
    case 166 /* Parameter */:
    case 205 /* BindingElement */:
      return true;
  }
  return false;
}
function isBindingOrAssignmentElement(node) {
  return isVariableDeclaration(node) || isParameter(node) || isObjectBindingOrAssignmentElement(node) || isArrayBindingOrAssignmentElement(node);
}
function isBindingOrAssignmentPattern(node) {
  return isObjectBindingOrAssignmentPattern(node) || isArrayBindingOrAssignmentPattern(node);
}
function isObjectBindingOrAssignmentPattern(node) {
  switch (node.kind) {
    case 203 /* ObjectBindingPattern */:
    case 207 /* ObjectLiteralExpression */:
      return true;
  }
  return false;
}
function isObjectBindingOrAssignmentElement(node) {
  switch (node.kind) {
    case 205 /* BindingElement */:
    case 299 /* PropertyAssignment */:
    case 300 /* ShorthandPropertyAssignment */:
    case 301 /* SpreadAssignment */:
      return true;
  }
  return false;
}
function isArrayBindingOrAssignmentPattern(node) {
  switch (node.kind) {
    case 204 /* ArrayBindingPattern */:
    case 206 /* ArrayLiteralExpression */:
      return true;
  }
  return false;
}
function isArrayBindingOrAssignmentElement(node) {
  switch (node.kind) {
    case 205 /* BindingElement */:
    case 229 /* OmittedExpression */:
    case 227 /* SpreadElement */:
    case 206 /* ArrayLiteralExpression */:
    case 207 /* ObjectLiteralExpression */:
    case 79 /* Identifier */:
    case 208 /* PropertyAccessExpression */:
    case 209 /* ElementAccessExpression */:
      return true;
  }
  return isAssignmentExpression(
    node,
    /*excludeCompoundAssignment*/
    true
  );
}
function isPropertyAccessOrQualifiedNameOrImportTypeNode(node) {
  const kind = node.kind;
  return kind === 208 /* PropertyAccessExpression */ || kind === 163 /* QualifiedName */ || kind === 202 /* ImportType */;
}
function isPropertyAccessOrQualifiedName(node) {
  const kind = node.kind;
  return kind === 208 /* PropertyAccessExpression */ || kind === 163 /* QualifiedName */;
}
function isCallLikeExpression(node) {
  switch (node.kind) {
    case 283 /* JsxOpeningElement */:
    case 282 /* JsxSelfClosingElement */:
    case 210 /* CallExpression */:
    case 211 /* NewExpression */:
    case 212 /* TaggedTemplateExpression */:
    case 167 /* Decorator */:
      return true;
    default:
      return false;
  }
}
function isCallOrNewExpression(node) {
  return node.kind === 210 /* CallExpression */ || node.kind === 211 /* NewExpression */;
}
function isTemplateLiteral(node) {
  const kind = node.kind;
  return kind === 225 /* TemplateExpression */ || kind === 14 /* NoSubstitutionTemplateLiteral */;
}
function isLeftHandSideExpression(node) {
  return isLeftHandSideExpressionKind(skipPartiallyEmittedExpressions(node).kind);
}
function isLeftHandSideExpressionKind(kind) {
  switch (kind) {
    case 208 /* PropertyAccessExpression */:
    case 209 /* ElementAccessExpression */:
    case 211 /* NewExpression */:
    case 210 /* CallExpression */:
    case 281 /* JsxElement */:
    case 282 /* JsxSelfClosingElement */:
    case 285 /* JsxFragment */:
    case 212 /* TaggedTemplateExpression */:
    case 206 /* ArrayLiteralExpression */:
    case 214 /* ParenthesizedExpression */:
    case 207 /* ObjectLiteralExpression */:
    case 228 /* ClassExpression */:
    case 215 /* FunctionExpression */:
    case 79 /* Identifier */:
    case 80 /* PrivateIdentifier */:
    case 13 /* RegularExpressionLiteral */:
    case 8 /* NumericLiteral */:
    case 9 /* BigIntLiteral */:
    case 10 /* StringLiteral */:
    case 14 /* NoSubstitutionTemplateLiteral */:
    case 225 /* TemplateExpression */:
    case 95 /* FalseKeyword */:
    case 104 /* NullKeyword */:
    case 108 /* ThisKeyword */:
    case 110 /* TrueKeyword */:
    case 106 /* SuperKeyword */:
    case 232 /* NonNullExpression */:
    case 230 /* ExpressionWithTypeArguments */:
    case 233 /* MetaProperty */:
    case 100 /* ImportKeyword */:
    case 279 /* MissingDeclaration */:
      return true;
    default:
      return false;
  }
}
function isUnaryExpression(node) {
  return isUnaryExpressionKind(skipPartiallyEmittedExpressions(node).kind);
}
function isUnaryExpressionKind(kind) {
  switch (kind) {
    case 221 /* PrefixUnaryExpression */:
    case 222 /* PostfixUnaryExpression */:
    case 217 /* DeleteExpression */:
    case 218 /* TypeOfExpression */:
    case 219 /* VoidExpression */:
    case 220 /* AwaitExpression */:
    case 213 /* TypeAssertionExpression */:
      return true;
    default:
      return isLeftHandSideExpressionKind(kind);
  }
}
function isUnaryExpressionWithWrite(expr) {
  switch (expr.kind) {
    case 222 /* PostfixUnaryExpression */:
      return true;
    case 221 /* PrefixUnaryExpression */:
      return expr.operator === 45 /* PlusPlusToken */ || expr.operator === 46 /* MinusMinusToken */;
    default:
      return false;
  }
}
function isLiteralTypeLiteral(node) {
  switch (node.kind) {
    case 104 /* NullKeyword */:
    case 110 /* TrueKeyword */:
    case 95 /* FalseKeyword */:
    case 221 /* PrefixUnaryExpression */:
      return true;
    default:
      return isLiteralExpression(node);
  }
}
function isExpression(node) {
  return isExpressionKind(skipPartiallyEmittedExpressions(node).kind);
}
function isExpressionKind(kind) {
  switch (kind) {
    case 224 /* ConditionalExpression */:
    case 226 /* YieldExpression */:
    case 216 /* ArrowFunction */:
    case 223 /* BinaryExpression */:
    case 227 /* SpreadElement */:
    case 231 /* AsExpression */:
    case 229 /* OmittedExpression */:
    case 357 /* CommaListExpression */:
    case 356 /* PartiallyEmittedExpression */:
    case 235 /* SatisfiesExpression */:
      return true;
    default:
      return isUnaryExpressionKind(kind);
  }
}
function isAssertionExpression(node) {
  const kind = node.kind;
  return kind === 213 /* TypeAssertionExpression */ || kind === 231 /* AsExpression */;
}
function isNotEmittedOrPartiallyEmittedNode(node) {
  return isNotEmittedStatement(node) || isPartiallyEmittedExpression(node);
}
function isIterationStatement(node, lookInLabeledStatements) {
  switch (node.kind) {
    case 245 /* ForStatement */:
    case 246 /* ForInStatement */:
    case 247 /* ForOfStatement */:
    case 243 /* DoStatement */:
    case 244 /* WhileStatement */:
      return true;
    case 253 /* LabeledStatement */:
      return lookInLabeledStatements && isIterationStatement(node.statement, lookInLabeledStatements);
  }
  return false;
}
function isScopeMarker(node) {
  return isExportAssignment(node) || isExportDeclaration(node);
}
function hasScopeMarker(statements) {
  return some(statements, isScopeMarker);
}
function needsScopeMarker(result) {
  return !isAnyImportOrReExport(result) && !isExportAssignment(result) && !hasSyntacticModifier(result, 1 /* Export */) && !isAmbientModule(result);
}
function isExternalModuleIndicator(result) {
  return isAnyImportOrReExport(result) || isExportAssignment(result) || hasSyntacticModifier(result, 1 /* Export */);
}
function isForInOrOfStatement(node) {
  return node.kind === 246 /* ForInStatement */ || node.kind === 247 /* ForOfStatement */;
}
function isConciseBody(node) {
  return isBlock(node) || isExpression(node);
}
function isFunctionBody(node) {
  return isBlock(node);
}
function isForInitializer(n