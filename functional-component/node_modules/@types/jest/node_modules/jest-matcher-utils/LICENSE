ation(node, isAnonymousClassNeedingAssignedName)) {
        const assignedName = getAssignedNameOfIdentifier(node.left, node.right);
        const left = visitNode(node.left, visitor, isExpression);
        const right = visitNode(node.right, (node2) => namedEvaluationVisitor(node2, assignedName), isExpression);
        return factory2.updateBinaryExpression(node, left, node.operatorToken, right);
      }
      if (isPrivateIdentifierPropertyAccessExpression(node.left)) {
        const info = accessPrivateIdentifier2(node.left.name);
        if (info) {
          return setTextRange(
            setOriginalNode(
              createPrivateIdentifierAssignment(info, node.left.expression, node.right, node.operatorToken.kind),
              node
            ),
            node
          );
        }
      } else if (shouldTransformSuperInStaticInitializers && isSuperProperty(node.left) && currentStaticPropertyDeclarationOrStaticBlock && (lexicalEnvironment == null ? void 0 : lexicalEnvironment.data)) {
        const { classConstructor, superClassReference, facts } = lexicalE