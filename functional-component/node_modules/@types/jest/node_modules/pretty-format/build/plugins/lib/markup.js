 permittedJumps &= ~4 /* Return */;
          break;
        case 255 /* TryStatement */:
          permittedJumps = 0 /* None */;
          break;
        case 238 /* Block */:
          if (node2.parent && node2.parent.kind === 255 /* TryStatement */ && node2.parent.finallyBlock === node2) {
            permittedJumps = 4 /* Return */;
          }
          break;
        case 293 /* DefaultClause */:
        case 292 /* CaseClause */:
          permittedJumps |= 1 /* Break */;
          break;
        default:
          if (isIterationStatement(
            node2,
            /*lookInLabeledStatements*/
            false
          )) {
            permittedJumps |= 1 /* Break */ | 2 /* Continue */;
          }
          break;
      }
      switch (node2.kind) {
        case 194 /* ThisType */:
        case 108 /* ThisKeyword */:
          rangeFacts |= 8 /* UsesThis */;
          thisNode = node2;
          break;
        case 253 /* LabeledStatement */: {
          const label = node2.label;
          (seenLabels || (seenLabels = [])).push(label.escapedText);
          forEachChild(node2, visit);
          seenLabels.pop();
          break;
        }
        case 249 /* BreakStatement */:
        case 248 /* ContinueStatement */: {
          const label = node2.label;
          if (label) {
            if (!contains(seenLabels, label.escapedText)) {
              (errors2 || (errors2 = [])).push(createDiagnosticForNode(node2, Messages.cannotExtractRangeContainingLabeledBreakOrContinueStatementWithTargetOutsideOfTheRange));
            }
          } else {
            if (!(permittedJumps & (node2.kind === 249 /* BreakStatement */ ? 1 /* Break */ : 2 /* Continue */))) {
              (errors2 || (errors2 = [])).push(createDiagnosticForNode(node2, Messages.cannotExtractRangeContainingConditionalBreakOrContinueStatements));
            }
          }
          break;
        }
        case 220 /* AwaitExpression */:
          rangeFacts |= 4 /* IsAsyncFunction */;
          break;
        case 226 /* YieldExpression */:
          rangeFacts |= 2 /* IsGenerator */;
          break;
        case 250 /* ReturnStatement */:
          if (permittedJumps & 4 /* Return */) {
            rangeFacts |= 1 /* HasReturn */;
          } else {
            (errors2 || (errors2 = [])).push(createDiagnosticForNode(node2, Messages.cannotExtractRangeContainingConditionalReturnStatement));
          }
          break;
        default:
          forEachChild(node2, visit);
          break;
      }
      permittedJumps = savedPermittedJumps;
    }
  }
}
function getAdjustedSpanFromNodes(startNode2, endNode2, sourceFile) {
  const start2 = startNode2.getStart(sourceFile);
  let end = endNode2.getEnd();
  if (sourceFile.text.charCodeAt(end) === 59 /* semicolon */) {
    end++;
  }
  return { start: start2, length: end - start2 };
}
function getStatementOrExpressionRange(node) {
  if (isStatement(node)) {
    return [node];
  }
  if (isExpressionNode(node)) {
    return isExpressionStatement(node.parent) ? [node.parent] : node;
  }
  if (isStringLiteralJsxAttribute(node)) {
    return node;
  }
  return void 0;
}
function isScope(node) {
  return isArrowFunction(node) ? isFunctionBody(node.body) : isFunctionLikeDeclaration(node) || isSourceFile(node) || isModuleBlock(node) || isClassLike(node);
}
function collectEnclosingScopes(range) {
  let current = isRea