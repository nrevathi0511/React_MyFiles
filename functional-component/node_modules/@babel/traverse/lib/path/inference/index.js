_18043", "Types cannot appear in export declarations in JavaScript files."),
  _0_is_automatically_exported_here: diag(18044, 3 /* Message */, "_0_is_automatically_exported_here_18044", "'{0}' is automatically exported here."),
  Properties_with_the_accessor_modifier_are_only_available_when_targeting_ECMAScript_2015_and_higher: diag(18045, 1 /* Error */, "Properties_with_the_accessor_modifier_are_only_available_when_targeting_ECMAScript_2015_and_higher_18045", "Properties with the 'accessor' modifier are only available when targeting ECMAScript 2015 and higher."),
  _0_is_of_type_unknown: diag(18046, 1 /* Error */, "_0_is_of_type_unknown_18046", "'{0}' is of type 'unknown'."),
  _0_is_possibly_null: diag(18047, 1 /* Error */, "_0_is_possibly_null_18047", "'{0}' is possibly 'null'."),
  _0_is_possibly_undefined: diag(18048, 1 /* Error */, "_0_is_possibly_undefined_18048", "'{0}' is possibly 'undefined'."),
  _0_is_possibly_null_or_undefined: diag(18049, 1 /* Error */, "_0_is_possibly_null_or_undefined_18049", "'{0}' is possibly 'null' or 'undefined'."),
  The_value_0_cannot_be_used_here: diag(18050, 1 /* Error */, "The_value_0_cannot_be_used_here_18050", "The value '{0}' cannot be used here."),
  Compiler_option_0_cannot_be_given_an_empty_string: diag(18051, 1 /* Error */, "Compiler_option_0_cannot_be_given_an_empty_string_18051", "Compiler option '{0}' cannot be given an empty string.")
};

// src/compiler/scanner.ts
function tokenIsIdentifierOrKeyword(token) {
  return token >= 79 /* Identifier */;
}
function tokenIsIdentifierOrKeywordOrGreaterThan(token) {
  return token === 31 /* GreaterThanToken */ || tokenIsIdentifierOrKeyword(token);
}
var textToKeywordObj = {
  abstract: 126 /* AbstractKeyword */,
  accessor: 127 /* AccessorKeyword */,
  any: 131 /* AnyKeyword */,
  as: 128 /* AsKeyword */,
  asserts: 129 /* AssertsKeyword */,
  assert: 130 /* AssertKeyword */,
  bigint: 160 /* BigIntKeyword */,
  boolean: 134 /* BooleanKeyword */,
  break: 81 /* BreakKeyword */,
  case: 82 /* CaseKeyword */,
  catch: 83 /* CatchKeyword */,
  class: 84 /* ClassKeyword */,
  continue: 86 /* ContinueKeyword */,
  const: 85 /* ConstKeyword */,
  ["constructor"]: 135 /* ConstructorKeyword */,
  debugger: 87 /* DebuggerKeyword */,
  declare: 136 /* DeclareKeyword */,
  default: 88 /* DefaultKeyword */,
  delete: 89 /* DeleteKeyword */,
  do: 90 /* DoKeyword */,
  else: 91 /* ElseKeyword */,
  enum: 92 /* EnumKeyword */,
  export: 93 /* ExportKeyword */,
  extends: 94 /* ExtendsKeyword */,
  false: 95 /* FalseKeyword */,
  finally: 96 /* FinallyKeyword */,
  for: 97 /* ForKeyword */,
  from: 158 /* FromKeyword */,
  function: 98 /* FunctionKeyword */,
  get: 137 /* GetKeyword */,
  if: 99 /* IfKeyword */,
  implements: 117 /* ImplementsKeyword */,
  import: 100 /* ImportKeyword */,
  in: 101 /* InKeyword */,
  infer: 138 /* InferKeyword */,
  instanceof: 102 /* InstanceOfKeyword */,
  interface: 118 /* InterfaceKeyword */,
  intrinsic: 139 /* IntrinsicKeyword */,
  is: 140 /* IsKeyword */,
  keyof: 141 /* KeyOfKeyword */,
  let: 119 /* LetKeyword */,
  module: 142 /* ModuleKeyword */,
  namespace: 143 /* NamespaceKeyword */,
  never: 144 /* NeverKeyword */,
  new: 103 /* NewKeyword */,
  null: 104 /* NullKeyword */,
  number: 148 /* NumberKeyword */,
  object: 149 /* ObjectKeyword */,
  package: 120 /* PackageKeyword */,
  private: 121 /* PrivateKeyword */,
  protected: 122 /* ProtectedKeyword */,
  public: 123 /* PublicKeyword */,
  override: 161 /* OverrideKeyword */,
  out: 145 /* OutKeyword */,
  readonly: 146 /* ReadonlyKeyword */,
  require: 147 /* RequireKeyword */,
  global: 159 /* GlobalKeyword */,
  return: 105 /* ReturnKeyword */,
  satisfies: 150 /* SatisfiesKeyword */,
  set: 151 /* SetKeyword */,
  static: 124 /* StaticKeyword */,
  string: 152 /* StringKeyword */,
  super: 106 /* SuperKeyword */,
  switch: 107 /* SwitchKeyword */,
  symbol: 153 /* SymbolKeyword */,
  this: 108 /* ThisKeyword */,
  throw: 109 /* ThrowKeyword */,
  true: 110 /* TrueKeyword */,
  try: 111 /* TryKeyword */,
  type: 154 /* TypeKeyword */,
  typeof: 112 /* TypeOfKeyword */,
  undefined: 155 /* UndefinedKeyword */,
  unique: 156 /* UniqueKeyword */,
  unknown: 157 /* UnknownKeyword */,
  var: 113 /* VarKeywor